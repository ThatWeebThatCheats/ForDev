#include "backtrack.hpp"
#include "../visuals/visuals.hpp"

inline float point_to_line(Vector Point, Vector LineOrigin, Vector Dir)
{
	auto PointDir = Point - LineOrigin;

	auto TempOffset = PointDir.Dot(Dir) / (Dir.x*Dir.x + Dir.y*Dir.y + Dir.z*Dir.z);
	if (TempOffset < 0.000001f)
		return FLT_MAX;

	auto PerpendicularPoint = LineOrigin + (Dir * TempOffset);

	return (Point - PerpendicularPoint).Length();
}

void CBacktrack::AddLatency(INetChannel* net_channel, float latency)
{
	for (const auto& sequence : sequence_records)
	{
		if (Interfaces::GlobalVars->realtime - sequence.time >= latency)
		{
			net_channel->m_nInReliableState = sequence.in_reliable_state;
			net_channel->m_nInSequenceNr = sequence.in_sequence_num;
			break;
		}
	}
}

float CBacktrack::GetLerpTime()
{
	int ud_rate = g_CVar->FindVar("cl_updaterate")->GetInt();
	ConVar* min_ud_rate = g_CVar->FindVar("sv_minupdaterate");
	ConVar* max_ud_rate = g_CVar->FindVar("sv_maxupdaterate");

	//Console.WriteLine(min_ud_rate->GetFlags)

	if (min_ud_rate && max_ud_rate)
	{
		ud_rate = max_ud_rate->GetInt();
	}

	float ratio = g_CVar->FindVar("cl_interp_ratio")->GetFloat();

	if (ratio == 0)
	{
		ratio = 1.0f;
	}

	float lerp = g_CVar->FindVar("cl_interp")->GetFloat();
	ConVar* c_min_ratio = g_CVar->FindVar("sv_client_min_interp_ratio");
	ConVar* c_max_ratio = g_CVar->FindVar("sv_client_max_interp_ratio");

	if (c_min_ratio && c_max_ratio && c_min_ratio->GetFloat() != 1)
	{
		ratio = std::clamp(ratio, c_min_ratio->GetFloat(), c_max_ratio->GetFloat());
	}

	return std::max<float>(lerp, (ratio / ud_rate));
}

void CBacktrack::UpdateIncomingSequences()
{
	auto nci = reinterpret_cast<INetChannel*>(Interfaces::ClientState->m_NetChannel);
	if (!nci)
		return;

	if (nci->m_nInSequenceNr > last_incoming_sequence || !nci->m_nInSequenceNr)
	{
		last_incoming_sequence = nci->m_nInSequenceNr;

		sequence_records.push_front(Incoming_Sequence_Record(nci->m_nInReliableState, nci->m_nOutReliableState, nci->m_nInSequenceNr, Interfaces::GlobalVars->realtime));
	}

	if (sequence_records.size() > 2048)
		sequence_records.pop_back();
}























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































